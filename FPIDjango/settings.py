"""
Django settings for FPIDjango project.

----

For now (until someone has time to improve this, there are two ways to
manage settings for running the application.

The first way is mandatory (for now).

1.  Under the FPIDjango directory create a subdirectory called "private".

2.  In that directory copy the "private_settings_SAMPLE_ONLY.py" to a file
called "private_settings.py".

3.  Tailor the "private_settings.py" file to your needs.

The second way is optional.

1.  Add a file to the config/Docker/web directory called ".env".

    -   Note this file is a shell script whose name begins with a period.

2.  Populate the shell script with these variables:

    # Application variables
    DEBUG=True                                # or False
    SQL_ENGINE=django.db.backends.postgresql
    SQL_DATABASE=<database name>
    SQL_USER=<username>
    SQL_PASSWORD=<password
    SQL_HOST=<server hosting the database>
    SQL_PORT=<port>                           # default is 5432
    DJANGO_STATIC_ROOT=<static root directory>
    SECRET_KEY=<some arbitrary (and random) 50 character sequence>
    DJANGO_ALLOWED_HOSTS=<list of hosts>
        # can be muliple hosts separated with a space
        # e. g. "localhost 127.0.0.1 [::1] nginx"

    # Used by startup script (entrypoint.web.sh)
    DATABASE=postgres

----

(Comments autogenerated by Django )
Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from os.path import dirname, join

import psycopg2.extensions
import django_extensions

from FPIDjango.private.settings_private import *

__author__ = '(Multiple)'
__project__ = "Food-Pantry-Inventory"
__creation_date__ = "04/01/2019"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SCANS_DIR = join(dirname(BASE_DIR), 'scans')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY_SETTING

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = DEBUG_SETTING

# Site info - see https://docs.djangoproject.com/en/3.0/ref/contrib/sites/
SITE_ID = 1

ALLOWED_HOSTS = ALLOWED_HOSTS_SETTING


# Application definition

INSTALLED_APPS = [

    # Application app(s)
    'fpiweb.apps.FpiwebConfig',

    # Django supplied apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # Third party apps
    'bootstrap4',
    'django_extensions'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'FPIDjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # 'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            os.path.join(BASE_DIR, 'fpiweb/')
        ],

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'FPIDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # },
    'default': {
            'ENGINE': DB_ENGINE_SETTING,
            'NAME': DB_NAME_SETTING,
            'USER': DB_USER_SETTING,
            'PASSWORD': DB_PSWD_SETTING,
            'HOST': DB_HOST_SETTING,
            'PORT': DB_PORT_SETTING,
    }
}


# Password hashers
# https://docs.djangoproject.com/en/3.0/topics/auth/passwords/
# Using Argon2 as the primary password hasher.  See:
# https://docs.djangoproject.com/en/3.0/topics/auth/passwords/#password-upgrading
# for how Django will automatically upgrade the password algorithm whenever
# a user logs in.
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        },
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    {
        'NAME': 'fpiweb.password_validation.WarmInPasswordValidator',
    },
    {
        'NAME': 'fpiweb.password_validation.CurrentMonthInPasswordValidator',
    },
    {
        'NAME': 'fpiweb.password_validation.ShortPasswordValidator',
        'OPTIONS': {
            'length_threshold': 12,
        },
    },
]

# URL to allow a user to authenticate herself.  This becomes the default
# used whenever Django detects someone trying to do something requiring
# authentication.
LOGIN_URL = 'fpiweb:login'

LOGIN_REDIRECT_URL = 'fpiweb:index'

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = STATIC_ROOT_SETTING
# django-bootstrap4 settings
# Default settings
BOOTSTRAP4 = {

    # The complete URL to the Bootstrap CSS file
    # Note that a URL can be either a string,
    # e.g. "https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap
    # .min.css",
    # or a dict like the default value below.
    "css_url": {
        "href": "https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css"
                "/bootstrap.min.css",
        "integrity": "sha384-WskhaSGFgHYWDcbwN70/dfYBj47jz9qbsMId"
                     "/iRN3ewGhXQFZCSftd1LZCfmhktB",
        "crossorigin": "anonymous",
    },

    # The complete URL to the Bootstrap JavaScript file
    "javascript_url": {
        "url": "https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js"
               "/bootstrap.min.js",
        "integrity": "sha384-smHYKdLADwkXOn1EmN1qk/HfnUcbVRZyYmZ4qpPea6sjB"
                     "/pTJ0euyQp0Mk8ck+5T",
        "crossorigin": "anonymous",
    },

    # The complete URL to the Bootstrap CSS file (None means no theme)
    "theme_url": None,

    # The URL to the jQuery JavaScript file (full)
    "jquery_url": {"url": "https://code.jquery.com/jquery-3.3.1.min.js",
        "integrity": "sha384-tsQFqpEReu7ZLhBV2VZlAu7zcOV+rXbYlF2cqB8txI"
                     "/8aZajjp4Bqd+V6D5IgvKT",
        "crossorigin": "anonymous",
                   },

    # The URL to the jQuery JavaScript file (slim)
    "jquery_slim_url": {
        "url": "https://code.jquery.com/jquery-3.3.1.slim.min.js",
        "integrity":
            "sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH"
            "+8abtTE1Pi6jizo",
        "crossorigin": "anonymous",
    },

    # The URL to the Popper.js JavaScript file (slim)
    "popper_url": {
        "url": "https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd"
               "/popper.min.js",
        "integrity":
            "sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK"
            "/l8WvCWPIPm49",
        "crossorigin": "anonymous",
    },

    # Put JavaScript in the HEAD section of the HTML document (only relevant
    # if you use bootstrap4.html)
    'javascript_in_head': False,

    # Include jQuery with Bootstrap JavaScript False|falsy|slim|full (
    # default=False)
    # False - means tag bootstrap_javascript use default value - `falsy` and
    # does not include jQuery)
    'include_jquery': False,

    # Label class to use in horizontal forms
    'horizontal_label_class': 'col-md-3',

    # Field class to use in horizontal forms
    'horizontal_field_class': 'col-md-9',

    # Set placeholder attributes to label if no placeholder is provided
    'set_placeholder': True,

    # Class to indicate required (better to set this in your Django form)
    'required_css_class': '',

    # Class to indicate error (better to set this in your Django form)
    'error_css_class': 'is-invalid',

    # Class to indicate success, meaning the field has valid input (better
    # to set this in your Django form)
    'success_css_class': 'is-valid',

    # Renderers (only set these if you have studied the source and
    # understand the inner workings)
    'formset_renderers': {
        'default': 'bootstrap4.renderers.FormsetRenderer',
    },
    'form_renderers': {
        'default': 'bootstrap4.renderers.FormRenderer',
    },
    'field_renderers': {
        'default': 'bootstrap4.renderers.FieldRenderer',
        'inline': 'bootstrap4.renderers.InlineFieldRenderer',
    },
}


LOG_DIR = join(BASE_DIR, 'log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters':{
        'standard': {
            'format': "{levelname}:{asctime}:{filename}:{lineno}:{message}",
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
        'django': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'django.log',
            'mode': 'w',
            'formatter': 'standard',
        },
        'fpiweb': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'fpiweb.log',
            'mode': 'w',
            'formatter': 'standard',
        },
        'file': {
            'class': 'logging.FileHandler',
            'level': 'INFO',
            'formatter': 'standard',
            'filename': 'root.log',
            'mode': 'w',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['django', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'fpiweb': {
            'handlers': ['fpiweb', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
    'root': {
        'level': 'INFO',
        'handlers': ['file', 'console'],
    },
}

# Sets up django-debug-toolbar in browser
# If toolbar disappears after adding an installed app  or middleware
# there might be a problem in the ordering of INSTALLED_APPS or MIDDLEWARE
# if DEBUG:
#     INSTALLED_APPS = INSTALLED_APPS + [
#         # django debug toolbar not on main stream
#         'debug_toolbar',
#     ]
#     MIDDLEWARE = MIDDLEWARE + [
#         'debug_toolbar.middleware.DebugToolbarMiddleware',
#     ]
#     INTERNAL_IPS = [
#             "127.0.0.1",
#     ]
